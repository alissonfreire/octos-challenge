name: Continuous Integration

env:
  MIX_ENV: test

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

permissions:
    contents: read

jobs:
  continuous-integration:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read .tool-versions
        uses: marocchino/tool-versions-action@v1
        id: versions

      - name: Set up Elixir
        uses: erlef/setup-beam@v1.18.2
        with:
          elixir-version: ${{ steps.versions.outputs.elixir }}
          otp-version: ${{ steps.versions.outputs.erlang }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        id: deps-cache
        with:
          path: deps
          key: Elixir-${{ steps.versions.outputs.elixir }}-erlang-${{ steps.versions.outputs.erlang }}-mix-${{ hashFiles('**/mix.lock') }}

      - name: Restore build cache
        uses: actions/cache@v3
        id: deps-build-cache
        with:
          path: _build
          key: Elixir-${{ steps.versions.outputs.elixir }}-erlang-${{ steps.versions.outputs.erlang }}-cross-commerce-${{ steps.previous-tag.outputs.tag }}
          restore-keys: Elixir-${{ steps.versions.outputs.elixir }}-erlang-${{ steps.versions.outputs.erlang }}-mix-${{ hashFiles('**/mix.lock') }}

      - name: Install dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Compile dependencies
        if: steps.deps-build-cache.outputs.cache-hit != 'true'
        run: mix deps.compile

      - name: Compile
        run: mix compile --warnings-as-errors

      - name: Check Formatting
        run: |
          fork_point=$(git merge-base --fork-point origin/${{ github.base_ref }})
          export CHANGED_FILES=$(git diff --name-only $fork_point HEAD | grep -E '(ex|exs)$')
          mix format --check-formatted $changed_files

      - name: Run Credo analysis
        run: |
          fork_point=$(git merge-base --fork-point origin/${{ github.base_ref }})
          export CHANGED_FILES=$(git diff --name-only $fork_point HEAD | grep -E '(ex|exs)$')
          if [ ! -z "$CHANGED_FILES" ] ; then mix credo --strict $files_included ; fi

      - name: Ecto setup
        run: |
          mix ecto.create
          mix ecto.migrate

      - name: Run tests
        run: mix test
        env:
          DB_HOST: localhost
          DB_PASS: postgres
          DB_USER: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
